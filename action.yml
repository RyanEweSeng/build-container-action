name: 'Build Container Action'

description: 'Builds and caches the image'

inputs:
  osg_series:
    description: 'OSG release series used to install packages'
    required: true
  repo:
    description: 'Input string that gets passed along to the docker build args'
    required: true
  context:
    description: 'Path to container files, including Dockerfile'
    required: false
    default: '.'
  name:
    description: 'Name of image'
    required: false
    default: 'temp'

runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v2

  - id: generate-image-name
    shell: bash
    run: |
      if [[ ${{ inputs.name }} != "temp" ]]; then
        # A name was specified
        IMAGE_NAME=$GITHUB_REPOSITORY_OWNER/${{ inputs.name }}
      elif [[ ${{ inputs.context }} == "." ]] || \
         [[ ${{ inputs.context }} == "./" ]]; then
         # Try to guess the image name from our docker repo naming conventions
         # E.g., opensciencegrid/docker-frontier-squid
         IMAGE_NAME=${GITHUB_REPOSITORY/opensciencegrid\/docker-//}
      elif [[ -d ${{ inputs.context }} ]]; then
         # Assume that the containing dir is the image name
         IMAGE_NAME=$(basename ${{ inputs.context }})
      else
        echo "${{ inputs.context }} is not a directory"
        exit 1
      fi
      echo "::set-output name=image::$IMAGE_NAME}"

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1

  - name: Build and push Docker images
    uses: docker/build-push-action@v2.8.0
    with:
      push: false
      context: ${{ inputs.context }}
      build-args: |
        BASE_YUM_REPO=${{ inputs.repo }}
        BASE_OSG_SERIES=${{ inputs.osg_series }}
      tags: "latest"
      cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  - name: Cache Docker images
    uses: actions/cache@v2
    with:
      path: /tmp/.buildx-cache
      key: ${{ steps.generate-image-name.outputs.image }}_${{ inputs.osg_series}}_${{ inputs.repo }}_buildx_${{ github.sha }}_${{ github.run_id }}
